description = "H2O Python Package"

dependencies {
    compile project(":h2o-assemblies:main")
}

def buildVersion = new H2OBuildVersion(rootDir, version)

ext {
    PROJECT_VERSION = buildVersion.getProjectVersion()
    pythonexe = findProperty("pythonExec") ?: "python"
    pipexe = findProperty("pipExec") ?: "pip"
    if (System.env.VIRTUAL_ENV) {
        pythonexe = "${System.env.VIRTUAL_ENV}/bin/python".toString()
        pipexe = "${System.env.VIRTUAL_ENV}/bin/pip".toString()
    }
    testsPath = file("tests")
}

//
// Create a file with version for Python dist task
//
task createVersionFiles() {
    doLast {
        File version_file = new File("${projectDir.toString()}/h2o", "version.txt")
        version_file.write(PROJECT_VERSION)

        File build_file = new File("${projectDir.toString()}/h2o", "buildinfo.txt")
        build_file.write(buildVersion.toString())
    }
}


task verifyDependencies(type: Exec) {
    commandLine getOsSpecificCommandLine([pythonexe,
                                          "scripts/verify_requirements.py",
                                          "--metayaml", "conda/h2o/meta.yaml"])
}


task buildDist(type: Exec, dependsOn: [verifyDependencies, createVersionFiles]) {
    doFirst {
        file("${buildDir}/tmp").mkdirs()
        standardOutput = new FileOutputStream(file("${buildDir}/tmp/h2o-py_buildDist.out"))
    }
    commandLine getOsSpecificCommandLine([pythonexe, "setup.py", "bdist_wheel"])
}

task smokeTest(type: Exec, dependsOn: build) {
    workingDir testsPath
    List<String> args = [pythonexe, '../../scripts/run.py', '--wipeall', '--testsize', 's']
    if (project.hasProperty("jacocoCoverage")) {
        args << '--jacoco'
    }
    commandLine getOsSpecificCommandLine(args)
}

task pythonVersion(type: Exec) {
    doFirst {
        println(System.env.VIRTUAL_ENV)
        println(environment)
    }
    commandLine getOsSpecificCommandLine([pythonexe, "--version"])
}


task cleanUpSmokeTest(type: Delete) {
    delete file("${testsPath}/results")
}

task cleanCoverageData(type: Delete) {
    delete file("${testsPath}/results/jacoco")
}

task cleanBuild(type: Delete) {
    doFirst {
        println "Cleaning..."
    }
    delete file("h2o/version.txt")
    delete file("h2o/buildinfo.txt")
    delete file("dist/")
    delete file("h2o.egg-info/")
    delete file("build/")
    delete fileTree(dir: "$projectDir/h2o" , include: '**/*.pyc')
}

//
// Define the dependencies
//
clean.dependsOn cleanBuild, cleanUpSmokeTest, cleanCoverageData
build.dependsOn buildDist
